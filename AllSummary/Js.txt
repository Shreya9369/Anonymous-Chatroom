1. DOM Content Loaded (DOMContentLoaded Event)
Purpose: This event waits until the entire HTML document is loaded and parsed before executing the script. This ensures that the JavaScript runs only after the elements (like buttons and forms) are available in the DOM.

Why It‚Äôs Used: Prevents errors where JavaScript might try to interact with elements that don‚Äôt exist yet.

2. Modals (Nickname and Rules)
Modals are small windows that pop up over the main content, often used for user interaction without navigating away from the page.

Nickname Modal: Prompts the user to choose a nickname when they first enter the chatroom.

Rules Modal: Displays the chatroom's rules, which the user can access by clicking a button.

Attributes for Accessibility:

aria-hidden: Used to show or hide modals from screen readers, improving accessibility. When aria-hidden="false", the modal is visible. When aria-hidden="true", it's hidden.

3. Handling Forms
Nickname Form: The user is asked to input a nickname when they first join. When submitted, the nickname is saved (or defaulted to "Anonymous" if left blank).

Chat Form: This form lets the user send messages. The message is sent when the form is submitted (by pressing the "Send" button or hitting Enter).

4. Adding Messages to the Chat
Message Structure:

Nickname: Displayed next to the message if it‚Äôs a user message.

Message Text: The actual content of the message.

Timestamp: Shows the time when the message was sent. It's formatted as a 2-digit hour and minute.

Functionality:

When a message is sent, it‚Äôs added to the chat area as a new list item (<li>).

The message list scrolls automatically to show the latest message.

Message Types:

User Messages: These are messages from the chat participants, showing their nickname.

System Messages: These are automatically generated messages, like welcome messages when the user joins.

5. Emoji Picker
Purpose: Allows users to insert emojis into their chat messages.

Toggle Functionality: The emoji picker opens when the emoji button is clicked, and each emoji can be selected by the user.

Positioning: The picker is positioned relative to the input box, ensuring it doesn't interfere with the text input field.

Insert Emoji: When an emoji is clicked, it's inserted at the current cursor position in the input field.

6. Dark/Light Theme Toggle
Purpose: Changes the appearance of the chat app based on the user's theme preference (dark mode vs light mode).

Implementation:

A button toggles the page between a light and dark theme by adding/removing a CSS class (light-theme) on the <body> tag.

The button icon also changes to reflect the current theme: üåô for dark mode, ‚òÄÔ∏è for light mode.

7. Escape Key Functionality
Escape Key Handling:

If either the nickname modal or the rules modal is open, pressing Escape will close it.

This provides an easy way for the user to exit the modals without needing to click the close button.

8. Event Listeners
General Event Listeners:

DOMContentLoaded: Ensures the script runs after the document has loaded.

submit on forms: Prevents the page from refreshing and handles sending the form data (messages and nicknames).

click on buttons: Handles interactions like opening modals, submitting the form, or toggling the emoji picker.

keydown for detecting Escape key presses to close modals.

9. User Count Simulation
Simulating User Count:

The user count starts as "1" (for demo purposes), which can be updated when users join the chat. In a real scenario, this could be tied to a server-side function to track the actual number of online users.

10. Helper Functions
Insert at Cursor: This function ensures that emojis are inserted at the current cursor position in the message input field, maintaining the user's typing flow.

Creating the Emoji Picker: The emoji picker is dynamically created when needed, which is a good practice to avoid loading it unless the user wants it.

Toggle Emoji Picker: Controls whether the emoji picker is shown or hidden.

11. CSS Styling (Class Manipulation)
Adding/Removing Classes:

Classes like .light-theme, .chat-message, .nickname, and .timestamp are added to elements dynamically in JavaScript, which then control their styles in the CSS file.

Flexbox and Positioning: The emoji picker is styled using flexbox to lay out the emojis in a row, and positioning is used to place the picker near the text input.

12. Responsiveness and Accessibility
ARIA Attributes: The use of aria-hidden="true/false" helps make the modals accessible to screen readers, so users with visual impairments can interact with the app more easily.

Keyboard Accessibility: The app allows modal closing with the Escape key and uses aria-hidden for better screen reader support, improving usability for keyboard and assistive technology users.

Key User Experience Features
User-Friendly: The system is designed to make the chatroom welcoming by allowing users to join quickly with a nickname and providing clear interaction paths with modals.

Minimal Distractions: By using modals for rules and nickname settings, the main chat area stays uncluttered.

Real-time Interaction: The chat messages are appended dynamically and scroll automatically, providing a smooth and intuitive experience for users.

Summary of Used Elements:
Modals: For nickname entry and chat rules.

Forms: For sending chat messages and entering a nickname.

Event Handling: For opening/closing modals, submitting forms, toggling emoji pickers, etc.

Dynamic Content: Adding messages to the chat, updating timestamps, and inserting emojis.

CSS Styling: Dynamically adding/removing classes to apply styles like themes or message appearance.

Keyboard and Mouse Interactivity: Handling actions through both keyboard (Escape) and mouse (clicking buttons).

